---
# tasks file for pxe
- name: install pxe pre-requisite packages 
  yum:
    name: ['tftp-server']
    state: latest
  when:
    - groups['primary'] is defined
    - ansible_fqdn in groups['primary']

- name: enable services
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - tftp
  when:
    - groups['primary'] is defined
    - ansible_fqdn in groups['primary']

- name: add firewalld service for tftp
  ansible.posix.firewalld:
    service: tftp
    permanent: yes
    immediate: yes
    state: enabled
  when:
    - groups['primary'] is defined
    - ansible_fqdn in groups['primary']

- name: use http vip if defined
  set_fact: 
    http_ip: "{% if http_ip is defined %}{{ http_ip }}{% elif vip is defined %}{{ vip }}{% else %}{{ ansible_default_ipv4.address }}{% endif %}"

- name: use dns vip if defined
  set_fact: 
    dns_ip: "{% if dns_ip is defined %}{{ dns_ip }}{% elif vip is defined %}{{ vip }}{% else %}{{ ansible_default_ipv4.address }}{% endif %}"

- debug:
    msg: "HTTP server - {{ http_ip }}"

- debug:
    msg: "DNS server - {{ dns_ip }}"

- name: update dhcpd config file with pxe details
  blockinfile:
    path: /etc/dhcp/dhcpd.conf
    insertafter: "subnet"
    block: "{{ lookup('template', 'pxe.config.j2') }}"
  notify: "restart dhcp"
  when:
    - groups['primary'] is defined
    - ansible_fqdn in groups['primary']
    - dhcp == 'managed'

- name: create required directories for pxe uefi/bios
  file:
     path: "/var/lib/tftpboot/{{ item }}"
     state: directory
  with_items:
    - uefi
    - rhcos
    - rhcos/{{ version }}
  when:
    - groups['primary'] is defined
    - ansible_fqdn in groups['primary']

- name: copy required files for pxe uefi/bios
  copy:
    src: "{{ item.src }}"
    dest: "/var/lib/tftpboot/{{ item.dest }}"
    remote_src: yes
  with_items:
    - { src: "{{ software_src }}/{{ kernel_file }}", dest: "rhcos/{{ version }}/{{ kernel_file }}" }
    - { src: "{{ software_src }}/{{ initramfs }}", dest: "rhcos/{{ version }}/{{ initramfs }}" }
    - { src: "{{ software_src }}/{{ rootfs }}", dest: "rhcos/{{ version }}/{{ rootfs }}" }
    - { src: /boot/efi/EFI/redhat/shimx64.efi, dest: uefi/shim.efi }
    - { src: /boot/efi/EFI/redhat/grubx64.efi, dest: uefi/grubx64.efi }
  when:
    - groups['primary'] is defined
    - ansible_fqdn in groups['primary']
    
- name: display network cidr
  set_fact:
    net_mask: "{{ ansible_default_ipv4.network }}/{{ ansible_default_ipv4.netmask }}"

- name: display cidr
  set_fact:
    net_mask_cidr: "{{ net_mask | ansible.utils.ipaddr('prefix') }}"

- name: get worker nodes details
  set_fact:
    nodes: "{{ hostvars[inventory_hostname]['compute_nodes'] }}"
  when:
    - groups['primary'] is defined
    - ansible_fqdn in groups['primary']
    - cluster_install == '5+ node'

- name: dispay compute node names
  debug:
    msg: "{{ item.name }}"
  loop: "{{ nodes }}"
  when:
    - groups['primary'] is defined
    - ansible_fqdn in groups['primary']
    - cluster_install == '5+ node'

- name: get bootstrap node details
  set_fact:
    bootstrap_info: "{{ hostvars[inventory_hostname]['bootstrap_node'] }}"
  when: bootstrap_node is defined

- name: get controplane node details
  set_fact:
    control_plane: "{{ hostvars[inventory_hostname]['control_nodes'] }}"
  when: control_nodes is defined

- name: get compute node details
  set_fact:
    compute_node: "{{ hostvars[inventory_hostname]['compute_nodes'] }}"
  when: compute_nodes is defined

- name: generate pxe menu grub.cfg file for bootstrap
  template:
    src: bootstrap.j2
    dest: "/var/lib/tftpboot/uefi/grub.cfg-01-{{ bootstrap_info[0].mac | lower | replace(':','-') }}"
    mode: 0755
  when:
    - bootstrap_node is defined
    - groups['primary'] is defined
    - ansible_fqdn in groups['primary']

- name: generate pxe menu grub.cfg file for master nodes
  template:
    src: master.j2
    dest: "/var/lib/tftpboot/uefi/grub.cfg-01-{{ item.mac | lower | replace(':','-') }}"
    mode: 0755
  vars:
    node: item
  loop: "{{ control_plane }}"
  when:
    - groups['primary'] is defined
    - ansible_fqdn in groups['primary']

- name: generate pxe menu grub.cfg file for worker nodes
  template:
    src: worker.j2
    dest: "/var/lib/tftpboot/uefi/grub.cfg-01-{{ item.mac | lower | replace(':','-') }}"
    mode: 0755
  vars:
    node: item
  loop: "{{ compute_node }}"
  when:
    - groups['primary'] is defined
    - ansible_fqdn in groups['primary']
    - compute_nodes is defined


- name: create tftp directory under /etc/systemd/system
  file: 
     path: "/etc/systemd/system/tftp.service.d"
     state: directory  
- name: create upload file under /etc/systemd/system/tftp.service.d
  copy:
    dest: "/etc/systemd/system/tftp.service.d/allow_uploads.conf"
    content: |
      [Service]
      ExecStart=
      ExecStart=/usr/sbin/in.tftpd -c -p  -s /var/lib/tftpboot
  notify: "reload systemd"
  notify: "restart tftp"  
  when:
    - groups['primary'] is defined
    - ansible_fqdn in groups['primary']

